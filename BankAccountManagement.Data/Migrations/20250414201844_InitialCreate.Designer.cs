// <auto-generated />
using System;
using BankAccountManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankAccountManagement.Data.Migrations
{
    [DbContext(typeof(BankAccountContext))]
    [Migration("20250414151844_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankAccountManagement.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.ToTable("Account", "dbo");
                });

            modelBuilder.Entity("BankAccountManagement.Entities.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("InterestRate")
                        .HasColumnType("int");

                    b.Property<int>("LinkedAccountId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("LoanId")
                        .HasName("PK_LoanId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("LinkedAccountId")
                        .IsUnique();

                    b.ToTable("Loan", "dbo");
                });

            modelBuilder.Entity("BankAccountManagement.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("CreditRating")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User", "dbo");
                });

            modelBuilder.Entity("BankAccountManagement.Entities.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "AccountId")
                        .HasName("PK_UserId_AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("UserAccount", "dbo");
                });

            modelBuilder.Entity("BankAccountManagement.Entities.Loan", b =>
                {
                    b.HasOne("BankAccountManagement.Entities.Account", null)
                        .WithOne("LinkedLoan")
                        .HasForeignKey("BankAccountManagement.Entities.Loan", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankAccountManagement.Entities.Account", "Account")
                        .WithOne("Loan")
                        .HasForeignKey("BankAccountManagement.Entities.Loan", "LinkedAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Loan_LinkedAccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BankAccountManagement.Entities.UserAccount", b =>
                {
                    b.HasOne("BankAccountManagement.Entities.Account", "Account")
                        .WithMany("UserAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserAccount_AccountId");

                    b.HasOne("BankAccountManagement.Entities.User", "User")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserAccount_UserId");

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankAccountManagement.Entities.Account", b =>
                {
                    b.Navigation("LinkedLoan")
                        .IsRequired();

                    b.Navigation("Loan")
                        .IsRequired();

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("BankAccountManagement.Entities.User", b =>
                {
                    b.Navigation("UserAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
